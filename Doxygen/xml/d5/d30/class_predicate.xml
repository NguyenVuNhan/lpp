<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d5/d30/class_predicate" kind="class" language="C++" prot="public">
    <compoundname>Predicate</compoundname>
    <basecompoundref refid="dd/df8/class_tree" prot="public" virt="non-virtual">Tree</basecompoundref>
    <includes refid="df/da5/predicate_8h" local="no">predicate.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d30/class_predicate_1aae9f9c0874342d8439f6c7ccaa44d76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Predicate::Predicate</definition>
        <argsstring>(string prop=&quot;&quot;)</argsstring>
        <name>Predicate</name>
        <param>
          <type>string</type>
          <declname>prop</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="9" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="17" bodyend="30"/>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">Tree::prop_in</references>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">Tree::tree</references>
        <references refid="d5/d30/class_predicate_1a5c43d5efe67d0fdeae29ec38267e5acb" compoundref="db/d07/predicate_8cpp" startline="84" endline="122">parse</references>
      </memberdef>
      <memberdef kind="function" id="d5/d30/class_predicate_1a0ebfd4d64be4d59053157ca73e7bbd79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Predicate::Predicate</definition>
        <argsstring>(shared_ptr&lt; Node &gt; tree=nullptr)</argsstring>
        <name>Predicate</name>
        <param>
          <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
          <declname>tree</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="10" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="32" bodyend="36"/>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">Tree::prop_in</references>
      </memberdef>
      <memberdef kind="function" id="d5/d30/class_predicate_1a0ba364e4092dee9b9c43e0c447f36de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Predicate::~Predicate</definition>
        <argsstring>() override</argsstring>
        <name>~Predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="11" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d5/d30/class_predicate_1a0572df9e18344e95ca1ce521d551a0ea" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Predicate::getStatement</definition>
        <argsstring>(string prop, unsigned int &amp;pos) override</argsstring>
        <name>getStatement</name>
        <reimplements refid="dd/df8/class_tree_1a016c2300dfa5444a52e6e6db7be850d2">getStatement</reimplements>
        <param>
          <type>string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="14" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d5/d30/class_predicate_1a68cb341b481a973037db8d4b369bd73f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Predicate::getNode</definition>
        <argsstring>(char notation) override</argsstring>
        <name>getNode</name>
        <reimplements refid="dd/df8/class_tree_1a60a9b7d65fc663d2db005b01119efa73">getNode</reimplements>
        <param>
          <type>char</type>
          <declname>notation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="15" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="51" bodyend="82"/>
        <referencedby refid="d5/d30/class_predicate_1a5c43d5efe67d0fdeae29ec38267e5acb" compoundref="db/d07/predicate_8cpp" startline="84" endline="122">parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="d5/d30/class_predicate_1a5c43d5efe67d0fdeae29ec38267e5acb" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Predicate::parse</definition>
        <argsstring>(string prop, unsigned int &amp;pos) override</argsstring>
        <name>parse</name>
        <reimplements refid="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1">parse</reimplements>
        <param>
          <type>string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="16" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="84" bodyend="122"/>
        <references refid="d5/d30/class_predicate_1a68cb341b481a973037db8d4b369bd73f" compoundref="db/d07/predicate_8cpp" startline="51" endline="82">getNode</references>
        <referencedby refid="d5/d30/class_predicate_1aae9f9c0874342d8439f6c7ccaa44d76c" compoundref="db/d07/predicate_8cpp" startline="17" endline="30">Predicate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d5/d30/class_predicate_1ae2524ae4cd1e71a00984f6a49d717469" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>list&lt; string &gt;</type>
        <definition>list&lt; string &gt; Predicate::getListVariable</definition>
        <argsstring>() override</argsstring>
        <name>getListVariable</name>
        <reimplements refid="dd/df8/class_tree_1a525967d14a17de0ad9c9072b025af1c3">getListVariable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/predicate.h" line="17" column="1" bodyfile="src/proposition/predicate.cpp" bodystart="124" bodyend="144"/>
        <references refid="dd/df8/class_tree_1a38bca58f3aef44e939f69f092037af50" compoundref="d3/d09/tree_8h" startline="17">Tree::varList</references>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">Tree::prop_in</references>
        <references refid="d5/d60/utils_8h_1a0dff2108971135c5c8b92f417761e6b7" compoundref="d5/d60/utils_8h" startline="14" endline="18">contains</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="112">
        <label>Predicate</label>
        <link refid="d5/d30/class_predicate"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>Tree</label>
        <link refid="dd/df8/class_tree"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="114">
        <label>Predicate</label>
        <link refid="d5/d30/class_predicate"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>Tree</label>
        <link refid="dd/df8/class_tree"/>
        <childnode refid="116" relation="usage">
          <edgelabel>tableaux</edgelabel>
        </childnode>
      </node>
      <node id="116">
        <label>SemanticTableaux</label>
        <link refid="d6/d22/class_semantic_tableaux"/>
      </node>
    </collaborationgraph>
    <location file="src/proposition/predicate.h" line="7" column="1" bodyfile="src/proposition/predicate.h" bodystart="6" bodyend="18"/>
    <listofallmembers>
      <member refid="dd/df8/class_tree_1ae19f22cfa4b782b5c0a048592ea3e95f" prot="public" virt="non-virtual"><scope>Predicate</scope><name>exportGraph</name></member>
      <member refid="dd/df8/class_tree_1ae235cdb84985c90fa56697a28b0a8d9e" prot="public" virt="non-virtual"><scope>Predicate</scope><name>exportProof</name></member>
      <member refid="dd/df8/class_tree_1a9d7b51cc207222de02ccb59192454de5" prot="public" virt="virtual"><scope>Predicate</scope><name>getDavidPutnam</name></member>
      <member refid="d5/d30/class_predicate_1ae2524ae4cd1e71a00984f6a49d717469" prot="private" virt="virtual"><scope>Predicate</scope><name>getListVariable</name></member>
      <member refid="d5/d30/class_predicate_1a68cb341b481a973037db8d4b369bd73f" prot="private" virt="virtual"><scope>Predicate</scope><name>getNode</name></member>
      <member refid="dd/df8/class_tree_1a7d2c78122409858b2516b52514bd7fe8" prot="public" virt="non-virtual"><scope>Predicate</scope><name>getProposition</name></member>
      <member refid="d5/d30/class_predicate_1a0572df9e18344e95ca1ce521d551a0ea" prot="private" virt="virtual"><scope>Predicate</scope><name>getStatement</name></member>
      <member refid="dd/df8/class_tree_1ad9bd7cd558397f596703e92fc47aa91f" prot="public" virt="non-virtual"><scope>Predicate</scope><name>getTree</name></member>
      <member refid="dd/df8/class_tree_1abde731a55b92d402fbbd166a577cbe91" prot="public" virt="non-virtual"><scope>Predicate</scope><name>getValue</name></member>
      <member refid="dd/df8/class_tree_1a22efa22748fa8d8a598e05ceb327dfd4" prot="public" virt="non-virtual"><scope>Predicate</scope><name>isTautology</name></member>
      <member refid="d5/d30/class_predicate_1a5c43d5efe67d0fdeae29ec38267e5acb" prot="private" virt="virtual"><scope>Predicate</scope><name>parse</name></member>
      <member refid="d5/d30/class_predicate_1aae9f9c0874342d8439f6c7ccaa44d76c" prot="public" virt="non-virtual"><scope>Predicate</scope><name>Predicate</name></member>
      <member refid="d5/d30/class_predicate_1a0ebfd4d64be4d59053157ca73e7bbd79" prot="public" virt="non-virtual"><scope>Predicate</scope><name>Predicate</name></member>
      <member refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" prot="protected" virt="non-virtual"><scope>Predicate</scope><name>prop_in</name></member>
      <member refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" prot="protected" virt="non-virtual"><scope>Predicate</scope><name>tree</name></member>
      <member refid="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" prot="public" virt="non-virtual"><scope>Predicate</scope><name>Tree</name></member>
      <member refid="dd/df8/class_tree_1a6515b810a36ab46fa79b9dc9d426a8ff" prot="public" virt="non-virtual"><scope>Predicate</scope><name>Tree</name></member>
      <member refid="dd/df8/class_tree_1a38bca58f3aef44e939f69f092037af50" prot="protected" virt="non-virtual"><scope>Predicate</scope><name>varList</name></member>
      <member refid="d5/d30/class_predicate_1a0ba364e4092dee9b9c43e0c447f36de3" prot="public" virt="non-virtual"><scope>Predicate</scope><name>~Predicate</name></member>
      <member refid="dd/df8/class_tree_1abdc38545cf3f588725b5d8b8075b3866" prot="public" virt="virtual"><scope>Predicate</scope><name>~Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
