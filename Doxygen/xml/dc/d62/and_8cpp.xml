<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dc/d62/and_8cpp" kind="file" language="C++">
    <compoundname>and.cpp</compoundname>
    <includes refid="d5/d25/and_8h" local="yes">and.h</includes>
    <includes refid="d8/dff/negate_8h" local="yes">negate.h</includes>
    <includes refid="d6/df8/nand_8h" local="yes">nand.h</includes>
    <includes refid="d4/d3f/value_8h" local="yes">value.h</includes>
    <includes refid="df/d34/or_8h" local="yes">or.h</includes>
    <incdepgraph>
      <node id="70">
        <label>list</label>
      </node>
      <node id="73">
        <label>iomanip</label>
      </node>
      <node id="78">
        <label>or.h</label>
        <link refid="df/d34/or_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>multior.h</label>
        <link refid="da/d4e/multior_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>negate.h</label>
        <link refid="d8/dff/negate_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>string</label>
      </node>
      <node id="65">
        <label>fstream</label>
      </node>
      <node id="61">
        <label>src/notation/and.cpp</label>
        <link refid="dc/d62/and_8cpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>../../utils.h</label>
        <link refid="d5/d60/utils_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>../proposition/tableaux/stnode.h</label>
        <link refid="d6/d13/stnode_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>and.h</label>
        <link refid="d5/d25/and_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>array</label>
      </node>
      <node id="64">
        <label>iostream</label>
      </node>
      <node id="68">
        <label>../proposition/tableaux/enum.h</label>
        <link refid="d5/d32/proposition_2tableaux_2enum_8h"/>
      </node>
      <node id="77">
        <label>value.h</label>
        <link refid="d4/d3f/value_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>nand.h</label>
        <link refid="d6/df8/nand_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>algorithm</label>
      </node>
      <node id="63">
        <label>node.h</label>
        <link refid="d1/d77/node_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/d25/and_8h" kindref="compound">and.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/dff/negate_8h" kindref="compound">negate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/df8/nand_8h" kindref="compound">nand.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d3f/value_8h" kindref="compound">value.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d34/or_8h" kindref="compound">or.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="d0/dc9/class_and_1a6058f4ed6168568b529e1e0750df8cf8" refkind="member"><highlight class="normal"><ref refid="d0/dc9/class_and_1a6058f4ed6168568b529e1e0750df8cf8" kindref="member">And::And</ref>(shared_ptr&lt;Node&gt;<sp/>l,<sp/>shared_ptr&lt;Node&gt;<sp/>r)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="dc/d8f/class_node" kindref="compound">Node</ref>(l,<sp/>r)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d8f/class_node_1a0178acf2d687a5535122e4cdb1e8e079" kindref="member">notation</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="d0/dc9/class_and_1af7bc87f11ac21a32c28c194f3eb94650" refkind="member"><highlight class="normal"><ref refid="d0/dc9/class_and_1af7bc87f11ac21a32c28c194f3eb94650" kindref="member">And::~And</ref>()</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d0/dc9/class_and_1a9d2b965d8a1b80d0e2da9d6537601e14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d0/dc9/class_and_1a9d2b965d8a1b80d0e2da9d6537601e14" kindref="member">And::getValue</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>valList)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>-&gt;getValue(valList)<sp/>&amp;&amp;<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>-&gt;getValue(valList));</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d0/dc9/class_and_1a9b62ef9a38c6fe9ac96c958d46e30f7b" refkind="member"><highlight class="normal"><ref refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8" kindref="member">RULES</ref><sp/><ref refid="d0/dc9/class_and_1a9b62ef9a38c6fe9ac96c958d46e30f7b" kindref="member">And::getSTRuleName</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegation)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegation)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8afbaa3fc38bba7fcfaffd6e5d346288c9" kindref="member">BETA</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8a47e073572a47a01522b766b027f1a16c" kindref="member">ALPHA</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="d0/dc9/class_and_1a790a8f5b095f664f0a879d2bf96c972d" refkind="member"><highlight class="normal">shared_ptr&lt;Node&gt;<sp/><ref refid="d0/dc9/class_and_1a790a8f5b095f664f0a879d2bf96c972d" kindref="member">And::nandify</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegation)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isNegation)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>tmp<sp/>=<sp/>make_shared&lt;NAnd&gt;(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>,<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tmp-&gt;nandify();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>tmp_1<sp/>=<sp/>make_shared&lt;NAnd&gt;(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>,<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>tmp_2<sp/>=<sp/>make_shared&lt;NAnd&gt;(tmp_1-&gt;nandify(),<sp/>make_shared&lt;Value&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tmp_2-&gt;nandify();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="d0/dc9/class_and_1a081ebf199fb2388773a19d2c2044e574" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc9/class_and_1a081ebf199fb2388773a19d2c2044e574" kindref="member">And::getSTNodeChild</ref>(shared_ptr&lt;STNode&gt;<sp/>root,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegation)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;left<sp/>=<sp/>make_shared&lt;STNode&gt;(root-&gt;nodes,<sp/>root-&gt;listVar);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNegation)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;right<sp/>=<sp/>make_shared&lt;STNode&gt;(root-&gt;nodes,<sp/>root-&gt;listVar);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listReplaceAt&lt;Node&gt;(root-&gt;left-&gt;nodes,<sp/>make_shared&lt;Negate&gt;(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>),<sp/>pos);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listReplaceAt&lt;Node&gt;(root-&gt;right-&gt;nodes,<sp/>make_shared&lt;Negate&gt;(<ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>),<sp/>pos);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;shared_ptr&lt;Node&gt;&gt;<sp/>tmp_list;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_list.push_back(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_list.push_back(<ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listReplaceAt&lt;Node&gt;(root-&gt;left-&gt;nodes,<sp/>tmp_list,<sp/>pos);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="d0/dc9/class_and_1a18ea23cd682dce93808c34ea0243897f" refkind="member"><highlight class="normal">shared_ptr&lt;Node&gt;<sp/><ref refid="d0/dc9/class_and_1a18ea23cd682dce93808c34ea0243897f" kindref="member">And::cnfFilter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegation)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isNegation)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d8f/class_node_1a92e887aab236cfc28d81bdf0fdb9379f" kindref="member">orSimplify</ref>(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>-&gt;cnfFilter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>-&gt;cnfFilter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d8f/class_node_1afd9769d942984448aa8e541ada73b289" kindref="member">andSimplify</ref>(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>-&gt;cnfFilter(),<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>-&gt;cnfFilter());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="d0/dc9/class_and_1a370c86f44ee17b22208cdbc1f17a7b3f" refkind="member"><highlight class="normal">shared_ptr&lt;Node&gt;<sp/><ref refid="d0/dc9/class_and_1a370c86f44ee17b22208cdbc1f17a7b3f" kindref="member">And::cnfDistribution</ref>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>l<sp/>=<sp/><ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>-&gt;cnfDistribution();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;Node&gt;<sp/>r<sp/>=<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>-&gt;cnfDistribution();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref><sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shared_from_this();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="d0/dc9/class_and_1a7560a861ae68050c2aa22e2392a46a15" refkind="member"><highlight class="normal">shared_ptr&lt;Node&gt;<sp/><ref refid="d0/dc9/class_and_1a7560a861ae68050c2aa22e2392a46a15" kindref="member">And::copy</ref>()</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_shared&lt;And&gt;(<ref refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" kindref="member">left</ref>-&gt;copy(),<sp/><ref refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" kindref="member">right</ref>-&gt;copy());</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/notation/and.cpp"/>
  </compounddef>
</doxygen>
