<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d0/dc9/class_and" kind="class" language="C++" prot="public">
    <compoundname>And</compoundname>
    <basecompoundref refid="dc/d8f/class_node" prot="public" virt="non-virtual">Node</basecompoundref>
    <includes refid="d5/d25/and_8h" local="no">and.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/dc9/class_and_1a6058f4ed6168568b529e1e0750df8cf8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>And::And</definition>
        <argsstring>(shared_ptr&lt; Node &gt; l=nullptr, shared_ptr&lt; Node &gt; r=nullptr)</argsstring>
        <name>And</name>
        <param>
          <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
          <declname>l</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
          <declname>r</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="9" column="1" bodyfile="src/notation/and.cpp" bodystart="7" bodyend="11"/>
        <references refid="dc/d8f/class_node_1a0178acf2d687a5535122e4cdb1e8e079" compoundref="d1/d77/node_8h" startline="29">Node::notation</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1af7bc87f11ac21a32c28c194f3eb94650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>And::~And</definition>
        <argsstring>() override</argsstring>
        <name>~And</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="10" column="1" bodyfile="src/notation/and.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a9d2b965d8a1b80d0e2da9d6537601e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool And::getValue</definition>
        <argsstring>(string valList) override</argsstring>
        <name>getValue</name>
        <reimplements refid="dc/d8f/class_node_1afd0c2045f3955e02e3aa1e2e987f10b2">getValue</reimplements>
        <param>
          <type>string</type>
          <declname>valList</declname>
        </param>
        <briefdescription>
<para>get proposition value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>valList</parametername>
</parameternamelist>
<parameterdescription>
<para>- string contains proposition variable and their value. <linebreak/>
 e.g. &quot;A1B0C1&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proposition value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="15" column="1" bodyfile="src/notation/and.cpp" bodystart="17" bodyend="20"/>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a9b62ef9a38c6fe9ac96c958d46e30f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8" kindref="member">RULES</ref></type>
        <definition>RULES And::getSTRuleName</definition>
        <argsstring>(bool isNegation) override</argsstring>
        <name>getSTRuleName</name>
        <reimplements refid="dc/d8f/class_node_1a25b6581950988c2536a392a6874c8072">getSTRuleName</reimplements>
        <param>
          <type>bool</type>
          <declname>isNegation</declname>
        </param>
        <briefdescription>
<para>get semantic taubleux rule name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isNegation</parametername>
</parameternamelist>
<parameterdescription>
<para>- check if this node parent is Negation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RULES - semantic taubleaux rule name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="17" column="1" bodyfile="src/notation/and.cpp" bodystart="22" bodyend="28"/>
        <references refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8afbaa3fc38bba7fcfaffd6e5d346288c9" compoundref="d5/d32/proposition_2tableaux_2enum_8h" startline="8">BETA</references>
        <references refid="d5/d32/proposition_2tableaux_2enum_8h_1a70c93904c6a27d228050f922eb4fc3b8a47e073572a47a01522b766b027f1a16c" compoundref="d5/d32/proposition_2tableaux_2enum_8h" startline="6">ALPHA</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a790a8f5b095f664f0a879d2bf96c972d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; And::nandify</definition>
        <argsstring>(bool isNegation) override</argsstring>
        <name>nandify</name>
        <reimplements refid="dc/d8f/class_node_1a3b2e192b59b7e72908af7903c5a4e5c1">nandify</reimplements>
        <param>
          <type>bool</type>
          <declname>isNegation</declname>
        </param>
        <briefdescription>
<para>nandify proposition </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isNegation</parametername>
</parameternamelist>
<parameterdescription>
<para>- check if this node parent is Negation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nandified tree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="19" column="1" bodyfile="src/notation/and.cpp" bodystart="30" bodyend="45"/>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a081ebf199fb2388773a19d2c2044e574" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void And::getSTNodeChild</definition>
        <argsstring>(shared_ptr&lt; STNode &gt; root, long pos, bool isNegation=false) override</argsstring>
        <name>getSTNodeChild</name>
        <reimplements refid="dc/d8f/class_node_1a1009cb6d84206c2b5eaa86580da59a7c">getSTNodeChild</reimplements>
        <param>
          <type>shared_ptr&lt; <ref refid="d0/d75/class_s_t_node" kindref="compound">STNode</ref> &gt;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>long</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isNegation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>get semantic taubleaux node child (<ref refid="d0/d75/class_s_t_node_1a19ba8bab4660bdeee0e897687b451a8b" kindref="member">STNode.left</ref> and <ref refid="d0/d75/class_s_t_node_1a66d06118063fb739058f91c75b725e27" kindref="member">STNode.right</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="d0/d75/class_s_t_node" kindref="compound">STNode</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">root</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="d0/d75/class_s_t_node" kindref="compound">STNode</ref> contains child </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>- position of child <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> of <ref refid="d0/d75/class_s_t_node_1a370cb3b8a6bcd2e488a27d47be4e0920" kindref="member">STNode::nodes</ref> list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isNegation</parametername>
</parameternamelist>
<parameterdescription>
<para>- check if this node parent is Negation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="21" column="1" bodyfile="src/notation/and.cpp" bodystart="47" bodyend="64"/>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a18ea23cd682dce93808c34ea0243897f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; And::cnfFilter</definition>
        <argsstring>(bool isNegation=false) override</argsstring>
        <name>cnfFilter</name>
        <reimplements refid="dc/d8f/class_node_1ab5b01fd3c4efe0f2eaf7fc41653359b7">cnfFilter</reimplements>
        <param>
          <type>bool</type>
          <declname>isNegation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>in this function node will be </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Remove bi-implicate</para></listitem><listitem><para>Remove implicate</para></listitem><listitem><para>Doing the morgan <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isNegation</parametername>
</parameternamelist>
<parameterdescription>
<para>- check if this node parent is Negation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>node has been cnf filtered </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="23" column="1" bodyfile="src/notation/and.cpp" bodystart="66" bodyend="76"/>
        <references refid="dc/d8f/class_node_1a92e887aab236cfc28d81bdf0fdb9379f" compoundref="d7/d70/node_8cpp" startline="64" endline="83">Node::orSimplify</references>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
        <references refid="dc/d8f/class_node_1afd9769d942984448aa8e541ada73b289" compoundref="d7/d70/node_8cpp" startline="85" endline="105">Node::andSimplify</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a370c86f44ee17b22208cdbc1f17a7b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; And::cnfDistribution</definition>
        <argsstring>() override</argsstring>
        <name>cnfDistribution</name>
        <reimplements refid="dc/d8f/class_node_1ae68e5138f0c1a6c79912e21bc8f39d48">cnfDistribution</reimplements>
        <briefdescription>
<para>cnf distribution - this function will be called after setVariable </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>node that applied distribution rule </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="25" column="1" bodyfile="src/notation/and.cpp" bodystart="78" bodyend="86"/>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
      </memberdef>
      <memberdef kind="function" id="d0/dc9/class_and_1a7560a861ae68050c2aa22e2392a46a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; And::copy</definition>
        <argsstring>() override</argsstring>
        <name>copy</name>
        <reimplements refid="dc/d8f/class_node_1a0d22a418a622a24852610fd51910c5eb">copy</reimplements>
        <briefdescription>
<para>deep copy node </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a deep copy of node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/notation/and.h" line="27" column="1" bodyfile="src/notation/and.cpp" bodystart="88" bodyend="91"/>
        <references refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" compoundref="d1/d77/node_8h" startline="26">Node::left</references>
        <references refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" compoundref="d1/d77/node_8h" startline="27">Node::right</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="0">
        <label>And</label>
        <link refid="d0/dc9/class_and"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Node</label>
        <link refid="dc/d8f/class_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>enable_shared_from_this&lt; Node &gt;</label>
      </node>
      <node id="3">
        <label>And</label>
        <link refid="d0/dc9/class_and"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Node</label>
        <link refid="dc/d8f/class_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/notation/and.h" line="7" column="1" bodyfile="src/notation/and.h" bodystart="6" bodyend="28"/>
    <listofallmembers>
      <member refid="d0/dc9/class_and_1a6058f4ed6168568b529e1e0750df8cf8" prot="public" virt="non-virtual"><scope>And</scope><name>And</name></member>
      <member refid="dc/d8f/class_node_1afd9769d942984448aa8e541ada73b289" prot="protected" virt="non-virtual"><scope>And</scope><name>andSimplify</name></member>
      <member refid="d0/dc9/class_and_1a370c86f44ee17b22208cdbc1f17a7b3f" prot="public" virt="virtual"><scope>And</scope><name>cnfDistribution</name></member>
      <member refid="d0/dc9/class_and_1a18ea23cd682dce93808c34ea0243897f" prot="public" virt="virtual"><scope>And</scope><name>cnfFilter</name></member>
      <member refid="dc/d8f/class_node_1ac76ac1cc0fd7376ca329f3e8279ebe1e" prot="public" virt="virtual"><scope>And</scope><name>containedSpecialNode</name></member>
      <member refid="d0/dc9/class_and_1a7560a861ae68050c2aa22e2392a46a15" prot="public" virt="virtual"><scope>And</scope><name>copy</name></member>
      <member refid="dc/d8f/class_node_1a73ccf66e577caa428163477f3b4cfe4d" prot="public" virt="virtual"><scope>And</scope><name>getLeaf</name></member>
      <member refid="d0/dc9/class_and_1a081ebf199fb2388773a19d2c2044e574" prot="public" virt="virtual"><scope>And</scope><name>getSTNodeChild</name></member>
      <member refid="d0/dc9/class_and_1a9b62ef9a38c6fe9ac96c958d46e30f7b" prot="public" virt="virtual"><scope>And</scope><name>getSTRuleName</name></member>
      <member refid="d0/dc9/class_and_1a9d2b965d8a1b80d0e2da9d6537601e14" prot="public" virt="virtual"><scope>And</scope><name>getValue</name></member>
      <member refid="dc/d8f/class_node_1a9b7777ab2a657b4a901b3578bbf68831" prot="public" virt="non-virtual"><scope>And</scope><name>isRulesReturned</name></member>
      <member refid="dc/d8f/class_node_1a978574f2c08939cfef1041041eb9c5be" prot="public" virt="non-virtual"><scope>And</scope><name>left</name></member>
      <member refid="d0/dc9/class_and_1a790a8f5b095f664f0a879d2bf96c972d" prot="public" virt="virtual"><scope>And</scope><name>nandify</name></member>
      <member refid="dc/d8f/class_node_1aade5a3c528aedf9de57dd1efc83d76cb" prot="public" virt="non-virtual"><scope>And</scope><name>Node</name></member>
      <member refid="dc/d8f/class_node_1a0178acf2d687a5535122e4cdb1e8e079" prot="public" virt="non-virtual"><scope>And</scope><name>notation</name></member>
      <member refid="dc/d8f/class_node_1a92e887aab236cfc28d81bdf0fdb9379f" prot="protected" virt="non-virtual"><scope>And</scope><name>orSimplify</name></member>
      <member refid="dc/d8f/class_node_1af68a851484bce64ed9463a50025df424" prot="public" virt="non-virtual"><scope>And</scope><name>right</name></member>
      <member refid="dc/d8f/class_node_1ae9bb2ba5b99e08fcd6f9aff0814a740f" prot="public" virt="virtual"><scope>And</scope><name>setVariable</name></member>
      <member refid="dc/d8f/class_node_1a0746502074a232243dcac3b96f3ce2d0" prot="public" virt="virtual"><scope>And</scope><name>toString</name></member>
      <member refid="dc/d8f/class_node_1a815b062345cf2bb42717bd16dc99ea27" prot="public" virt="virtual"><scope>And</scope><name>toStringPrefix</name></member>
      <member refid="dc/d8f/class_node_1a068e821ecc21903e5b3430e36493f390" prot="public" virt="non-virtual"><scope>And</scope><name>treeTraveler</name></member>
      <member refid="dc/d8f/class_node_1a350b631f3a9192bfa23bc266f6b8da02" prot="public" virt="non-virtual"><scope>And</scope><name>variables</name></member>
      <member refid="d0/dc9/class_and_1af7bc87f11ac21a32c28c194f3eb94650" prot="public" virt="non-virtual"><scope>And</scope><name>~And</name></member>
      <member refid="dc/d8f/class_node_1aa0840c3cb5c7159be6d992adecd2097c" prot="public" virt="virtual"><scope>And</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
