<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dd/daf/logging_8cpp" kind="file" language="C++">
    <compoundname>logging.cpp</compoundname>
    <includes refid="d5/d77/logging_8h" local="yes">logging.h</includes>
    <includes local="no">sys/time.h</includes>
    <incdepgraph>
      <node id="45">
        <label>list</label>
      </node>
      <node id="44">
        <label>string</label>
      </node>
      <node id="47">
        <label>fstream</label>
      </node>
      <node id="46">
        <label>sstream</label>
      </node>
      <node id="43">
        <label>logging.h</label>
        <link refid="d5/d77/logging_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>sys/time.h</label>
      </node>
      <node id="48">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>stdio.h</label>
      </node>
      <node id="42">
        <label>src/logging.cpp</label>
        <link refid="dd/daf/logging_8cpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/daf/logging_8cpp_1af90a9d943a7fb800048cdfb29a177f30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NowTime</definition>
        <argsstring>()</argsstring>
        <name>NowTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging.cpp" line="92" column="1" bodyfile="src/logging.cpp" bodystart="92" bodyend="104"/>
        <referencedby refid="d4/d8d/classlogging_1aa15fabd099ea702ad39a8bb82e56d56c" compoundref="dd/daf/logging_8cpp" startline="22" endline="26">logging::info</referencedby>
        <referencedby refid="d7/d88/structroot_logger_1af163fa3b8e6f1c7d4a2d1dd9fe1594ce" compoundref="dd/daf/logging_8cpp" startline="65" endline="68">rootLogger::info</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/d77/logging_8h" kindref="compound">logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="d4/d8d/classlogging" kindref="compound">logging</ref><sp/><ref refid="d7/d88/structroot_logger_1a91e51e01c8b12e95891d79807b93a6f0" kindref="member">rootLogger::log</ref><sp/>=<sp/><ref refid="d4/d8d/classlogging" kindref="compound">logging</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classhandler" kindref="compound">handler</ref>(</highlight><highlight class="stringliteral">&quot;root.log&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="d4/d8d/classlogging_1a9fc3278b328fdec4922315d85f772489" refkind="member"><highlight class="normal"><ref refid="d4/d8d/classlogging_1a9fc3278b328fdec4922315d85f772489" kindref="member">logging::logging</ref>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classhandler" kindref="compound">handler</ref>(</highlight><highlight class="stringliteral">&quot;log.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="d4/d8d/classlogging_1a38300200148601f298e30b8a84ad686c" refkind="member"><highlight class="normal"><ref refid="d4/d8d/classlogging_1a9fc3278b328fdec4922315d85f772489" kindref="member">logging::logging</ref>(<ref refid="d1/df0/classhandler" kindref="compound">handler</ref><sp/>*h)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref><sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d4/d8d/classlogging_1aa50e430d72fd366e7f906b61242c658f" refkind="member"><highlight class="normal"><ref refid="d4/d8d/classlogging_1aa50e430d72fd366e7f906b61242c658f" kindref="member">logging::~logging</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d4/d8d/classlogging_1aa15fabd099ea702ad39a8bb82e56d56c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/classlogging_1aa15fabd099ea702ad39a8bb82e56d56c" kindref="member">logging::info</ref>(std::string<sp/>message)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref>-&gt;<ref refid="d1/df0/classhandler_1ae4a74a6e7ba909279833759b4cab2bcc" kindref="member">write</ref>(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="dd/daf/logging_8cpp_1af90a9d943a7fb800048cdfb29a177f30" kindref="member">NowTime</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>[INFO]<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>message<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>myHandler-&gt;write(message<sp/>+<sp/>&apos;\n&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="d4/d8d/classlogging_1a3df699bc82c58695050e68f28fa4bf39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/classlogging_1a3df699bc82c58695050e68f28fa4bf39" kindref="member">logging::setHandler</ref>(<ref refid="d1/df0/classhandler" kindref="compound">handler</ref><sp/>*newHandler)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d8d/classlogging_1a0bd664aa980c8b51e8ebd84c5f6a3901" kindref="member">myHandler</ref><sp/>=<sp/>newHandler;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="d1/df0/classhandler_1a0f44a69126e692e8bc8690539120be75" refkind="member"><highlight class="normal"><ref refid="d1/df0/classhandler_1a0f44a69126e692e8bc8690539120be75" kindref="member">handler::handler</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ofs<sp/>=<sp/>stdout;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="d1/df0/classhandler_1a251fbf93fdf9eba4335c2d2b2f425f51" refkind="member"><highlight class="normal"><ref refid="d1/df0/classhandler_1a0f44a69126e692e8bc8690539120be75" kindref="member">handler::handler</ref>(std::string<sp/>fn)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>setStream(fn);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="d1/df0/classhandler_1a290cc764503dcc061a43c7be655ed512" refkind="member"><highlight class="normal"><ref refid="d1/df0/classhandler_1a290cc764503dcc061a43c7be655ed512" kindref="member">handler::~handler</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>ofs.close();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="d1/df0/classhandler_1a4d5c893a4bd43354effd040fd5946186" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classhandler_1a4d5c893a4bd43354effd040fd5946186" kindref="member">handler::setStream</ref>(std::string<sp/>fn)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ofs.open(fn);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="d1/df0/classhandler_1ae4a74a6e7ba909279833759b4cab2bcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/df0/classhandler_1ae4a74a6e7ba909279833759b4cab2bcc" kindref="member">handler::write</ref>(std::string<sp/>msg)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ofs<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="d7/d88/structroot_logger_1a2b12bc69ec8a404d513d7db3ea856be5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d88/structroot_logger_1a2b12bc69ec8a404d513d7db3ea856be5" kindref="member">rootLogger::setHandler</ref>(<ref refid="d1/df0/classhandler" kindref="compound">handler</ref><sp/>*newHandler)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>log.setHandler(newHandler);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="d7/d88/structroot_logger_1af163fa3b8e6f1c7d4a2d1dd9fe1594ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d88/structroot_logger_1af163fa3b8e6f1c7d4a2d1dd9fe1594ce" kindref="member">rootLogger::info</ref>(std::string<sp/>message)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>log.info(message);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(__WIN32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="dd/daf/logging_8cpp_1af90a9d943a7fb800048cdfb29a177f30" kindref="member">NowTime</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_LEN<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[MAX_LEN];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetTimeFormatA(LOCALE_USER_DEFAULT,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;HH&apos;:&apos;mm&apos;:&apos;ss&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/>MAX_LEN)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>NowTime()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>result[100]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DWORD<sp/>first<sp/>=<sp/>GetTickCount();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sprintf(result,<sp/></highlight><highlight class="stringliteral">&quot;%s.%03ld&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(GetTickCount()<sp/>-<sp/>first)<sp/>%<sp/>1000);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="d5/d77/logging_8h_1af90a9d943a7fb800048cdfb29a177f30" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="dd/daf/logging_8cpp_1af90a9d943a7fb800048cdfb29a177f30" kindref="member">NowTime</ref>()</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[11];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>t;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>time(&amp;t);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>tm<sp/>r<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>strftime(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="stringliteral">&quot;%X&quot;</highlight><highlight class="normal">,<sp/>localtime_r(&amp;t,<sp/>&amp;r));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tv;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;tv,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>result[100]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sprintf(result,<sp/></highlight><highlight class="stringliteral">&quot;%s.%03ld&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/>static_cast&lt;long&gt;(tv.tv_usec)<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//WIN32</highlight></codeline>
    </programlisting>
    <location file="src/logging.cpp"/>
  </compounddef>
</doxygen>
