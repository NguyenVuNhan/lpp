<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dd/df8/class_tree" kind="class" language="C++" prot="public">
    <compoundname>Tree</compoundname>
    <derivedcompoundref refid="dc/d0e/class_c_n_f" prot="public" virt="non-virtual">CNF</derivedcompoundref>
    <derivedcompoundref refid="d5/d30/class_predicate" prot="public" virt="non-virtual">Predicate</derivedcompoundref>
    <derivedcompoundref refid="dc/d49/class_truth_table" prot="public" virt="non-virtual">TruthTable</derivedcompoundref>
    <includes refid="d3/d09/tree_8h" local="no">tree.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/df8/class_tree_1a43a26e394162774b0e0614e6567f5fe1" prot="private" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::proposition</definition>
        <argsstring></argsstring>
        <name>proposition</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="11" column="1" bodyfile="src/proposition/tree.h" bodystart="11" bodyend="-1"/>
        <referencedby refid="dd/df8/class_tree_1a7d2c78122409858b2516b52514bd7fe8" compoundref="d1/d12/tree_8cpp" startline="78" endline="83">getProposition</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dd/df8/class_tree_1ae9dd5a4ebbf36cd6a952c78139221cad" prot="private" static="no" mutable="no">
        <type><ref refid="d6/d22/class_semantic_tableaux" kindref="compound">SemanticTableaux</ref></type>
        <definition>SemanticTableaux Tree::tableaux</definition>
        <argsstring></argsstring>
        <name>tableaux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="12" column="1" bodyfile="src/proposition/tree.h" bodystart="12" bodyend="-1"/>
        <referencedby refid="dd/df8/class_tree_1a22efa22748fa8d8a598e05ceb327dfd4" compoundref="d1/d12/tree_8cpp" startline="90" endline="94">isTautology</referencedby>
        <referencedby refid="dd/df8/class_tree_1ae235cdb84985c90fa56697a28b0a8d9e" compoundref="d1/d12/tree_8cpp" startline="111" endline="114">exportProof</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" prot="protected" static="no" mutable="no">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt;Node&gt; Tree::tree</definition>
        <argsstring></argsstring>
        <name>tree</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="16" column="1" bodyfile="src/proposition/tree.h" bodystart="16" bodyend="-1"/>
        <referencedby refid="dc/d0e/class_c_n_f_1af775e3be36e475027355d21e9ba43166" compoundref="d6/d79/cnf_8cpp" startline="9" endline="16">CNF::CNF</referencedby>
        <referencedby refid="dc/d0e/class_c_n_f_1a029535415f1d5cf92c8023693ce7b40e" compoundref="d6/d79/cnf_8cpp" startline="31" endline="37">CNF::getDavidPutnam</referencedby>
        <referencedby refid="d5/d80/struct_i___c_n_f_1afedf64bb258fd48ea0f811a9f571f0f0" compoundref="d6/d79/cnf_8cpp" startline="287" endline="292">I_CNF::generateCNF</referencedby>
        <referencedby refid="d5/d30/class_predicate_1aae9f9c0874342d8439f6c7ccaa44d76c" compoundref="db/d07/predicate_8cpp" startline="17" endline="30">Predicate::Predicate</referencedby>
        <referencedby refid="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" compoundref="d1/d12/tree_8cpp" startline="19" endline="33">Tree</referencedby>
        <referencedby refid="dd/df8/class_tree_1ad9bd7cd558397f596703e92fc47aa91f" compoundref="d1/d12/tree_8cpp" startline="47" endline="50">getTree</referencedby>
        <referencedby refid="dd/df8/class_tree_1a7d2c78122409858b2516b52514bd7fe8" compoundref="d1/d12/tree_8cpp" startline="78" endline="83">getProposition</referencedby>
        <referencedby refid="dd/df8/class_tree_1abde731a55b92d402fbbd166a577cbe91" compoundref="d1/d12/tree_8cpp" startline="85" endline="88">getValue</referencedby>
        <referencedby refid="dd/df8/class_tree_1a22efa22748fa8d8a598e05ceb327dfd4" compoundref="d1/d12/tree_8cpp" startline="90" endline="94">isTautology</referencedby>
        <referencedby refid="dd/df8/class_tree_1ae19f22cfa4b782b5c0a048592ea3e95f" compoundref="d1/d12/tree_8cpp" startline="96" endline="109">exportGraph</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dd/df8/class_tree_1a38bca58f3aef44e939f69f092037af50" prot="protected" static="no" mutable="no">
        <type>list&lt; string &gt;</type>
        <definition>list&lt;string&gt; Tree::varList</definition>
        <argsstring></argsstring>
        <name>varList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="17" column="1" bodyfile="src/proposition/tree.h" bodystart="17" bodyend="-1"/>
        <referencedby refid="dc/d0e/class_c_n_f_1abb762bfe4bc7bbccda81f8db332bafe3" compoundref="d6/d79/cnf_8cpp" startline="39" endline="63">CNF::getListVariable</referencedby>
        <referencedby refid="dc/d0e/class_c_n_f_1a0ae7d61f4d57fca35ff619af3300e63c" compoundref="d6/d79/cnf_8cpp" startline="101" endline="157">CNF::getDavidPutnam</referencedby>
        <referencedby refid="d5/d30/class_predicate_1ae2524ae4cd1e71a00984f6a49d717469" compoundref="db/d07/predicate_8cpp" startline="124" endline="144">Predicate::getListVariable</referencedby>
        <referencedby refid="dd/df8/class_tree_1a525967d14a17de0ad9c9072b025af1c3" compoundref="d1/d12/tree_8cpp" startline="52" endline="76">getListVariable</referencedby>
        <referencedby refid="dc/d49/class_truth_table_1ab113db56063be5ecf661ebc7fc439aee" compoundref="d9/d67/truthtable_8cpp" startline="6" endline="32">TruthTable::generateTable</referencedby>
        <referencedby refid="dc/d49/class_truth_table_1a9dcb8d74d39ebc1a8ada938f1ccbce97" compoundref="d9/d67/truthtable_8cpp" startline="69" endline="82">TruthTable::getNormalize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" prot="protected" static="no" mutable="no">
        <type>string</type>
        <definition>string Tree::prop_in</definition>
        <argsstring></argsstring>
        <name>prop_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="18" column="1" bodyfile="src/proposition/tree.h" bodystart="18" bodyend="-1"/>
        <referencedby refid="dc/d0e/class_c_n_f_1acb13869409764d8abbea2e50910fd7bc" compoundref="d6/d79/cnf_8cpp" startline="18" endline="25">CNF::CNF</referencedby>
        <referencedby refid="dc/d0e/class_c_n_f_1abb762bfe4bc7bbccda81f8db332bafe3" compoundref="d6/d79/cnf_8cpp" startline="39" endline="63">CNF::getListVariable</referencedby>
        <referencedby refid="d5/d30/class_predicate_1aae9f9c0874342d8439f6c7ccaa44d76c" compoundref="db/d07/predicate_8cpp" startline="17" endline="30">Predicate::Predicate</referencedby>
        <referencedby refid="d5/d30/class_predicate_1ae2524ae4cd1e71a00984f6a49d717469" compoundref="db/d07/predicate_8cpp" startline="124" endline="144">Predicate::getListVariable</referencedby>
        <referencedby refid="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" compoundref="d1/d12/tree_8cpp" startline="19" endline="33">Tree</referencedby>
        <referencedby refid="dd/df8/class_tree_1a525967d14a17de0ad9c9072b025af1c3" compoundref="d1/d12/tree_8cpp" startline="52" endline="76">getListVariable</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Tree::parse</definition>
        <argsstring>(string prop, unsigned int &amp;pos)</argsstring>
        <name>parse</name>
        <reimplementedby refid="d5/d30/class_predicate_1a5c43d5efe67d0fdeae29ec38267e5acb">parse</reimplementedby>
        <param>
          <type>string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="13" column="1" bodyfile="src/proposition/tree.cpp" bodystart="161" bodyend="177"/>
        <references refid="dd/df8/class_tree_1a60a9b7d65fc663d2db005b01119efa73" compoundref="d1/d12/tree_8cpp" startline="134" endline="159">getNode</references>
        <references refid="dd/df8/class_tree_1a016c2300dfa5444a52e6e6db7be850d2" compoundref="d1/d12/tree_8cpp" startline="121" endline="132">getStatement</references>
        <referencedby refid="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" compoundref="d1/d12/tree_8cpp" startline="19" endline="33">Tree</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="dd/df8/class_tree_1a016c2300dfa5444a52e6e6db7be850d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Tree::getStatement</definition>
        <argsstring>(string prop, unsigned int &amp;pos)</argsstring>
        <name>getStatement</name>
        <reimplementedby refid="d5/d30/class_predicate_1a0572df9e18344e95ca1ce521d551a0ea">getStatement</reimplementedby>
        <param>
          <type>string</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="19" column="1" bodyfile="src/proposition/tree.cpp" bodystart="121" bodyend="132"/>
        <referencedby refid="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1" compoundref="d1/d12/tree_8cpp" startline="161" endline="177">parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a60a9b7d65fc663d2db005b01119efa73" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Tree::getNode</definition>
        <argsstring>(char notation)</argsstring>
        <name>getNode</name>
        <reimplementedby refid="d5/d30/class_predicate_1a68cb341b481a973037db8d4b369bd73f">getNode</reimplementedby>
        <param>
          <type>char</type>
          <declname>notation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="20" column="1" bodyfile="src/proposition/tree.cpp" bodystart="134" bodyend="159"/>
        <referencedby refid="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1" compoundref="d1/d12/tree_8cpp" startline="161" endline="177">parse</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Tree::Tree</definition>
        <argsstring>(string prop=&quot;&quot;)</argsstring>
        <name>Tree</name>
        <param>
          <type>string</type>
          <declname>prop</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="23" column="1" bodyfile="src/proposition/tree.cpp" bodystart="19" bodyend="33"/>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">prop_in</references>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
        <references refid="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1" compoundref="d1/d12/tree_8cpp" startline="161" endline="177">parse</references>
        <referencedby refid="dc/d49/class_truth_table_1a9dcb8d74d39ebc1a8ada938f1ccbce97" compoundref="d9/d67/truthtable_8cpp" startline="69" endline="82">TruthTable::getNormalize</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a6515b810a36ab46fa79b9dc9d426a8ff" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Tree::Tree</definition>
        <argsstring>(shared_ptr&lt; Node &gt; tree=nullptr)</argsstring>
        <name>Tree</name>
        <param>
          <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
          <declname>tree</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="24" column="1" bodyfile="src/proposition/tree.cpp" bodystart="35" bodyend="40"/>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">prop_in</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1abdc38545cf3f588725b5d8b8075b3866" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Tree::~Tree</definition>
        <argsstring>()</argsstring>
        <name>~Tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="25" column="1" bodyfile="src/proposition/tree.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1ad9bd7cd558397f596703e92fc47aa91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="dc/d8f/class_node" kindref="compound">Node</ref> &gt;</type>
        <definition>shared_ptr&lt; Node &gt; Tree::getTree</definition>
        <argsstring>()</argsstring>
        <name>getTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="27" column="1" bodyfile="src/proposition/tree.cpp" bodystart="47" bodyend="50"/>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a525967d14a17de0ad9c9072b025af1c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>list&lt; string &gt;</type>
        <definition>list&lt; string &gt; Tree::getListVariable</definition>
        <argsstring>()</argsstring>
        <name>getListVariable</name>
        <reimplementedby refid="d5/d30/class_predicate_1ae2524ae4cd1e71a00984f6a49d717469">getListVariable</reimplementedby>
        <reimplementedby refid="dc/d0e/class_c_n_f_1abb762bfe4bc7bbccda81f8db332bafe3">getListVariable</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="28" column="1" bodyfile="src/proposition/tree.cpp" bodystart="52" bodyend="76"/>
        <references refid="dd/df8/class_tree_1a38bca58f3aef44e939f69f092037af50" compoundref="d3/d09/tree_8h" startline="17">varList</references>
        <references refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" compoundref="d3/d09/tree_8h" startline="18">prop_in</references>
        <references refid="d5/d60/utils_8h_1a0dff2108971135c5c8b92f417761e6b7" compoundref="d5/d60/utils_8h" startline="14" endline="18">contains</references>
        <referencedby refid="d0/d52/class_simple_table_1a34c3e2eb7dcd3c05e22ea56f719913e2" compoundref="dd/dcd/simpletable_8cpp" startline="42" endline="67">SimpleTable::getAllRowsGroup</referencedby>
        <referencedby refid="dc/d49/class_truth_table_1ab113db56063be5ecf661ebc7fc439aee" compoundref="d9/d67/truthtable_8cpp" startline="6" endline="32">TruthTable::generateTable</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a7d2c78122409858b2516b52514bd7fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string Tree::getProposition</definition>
        <argsstring>()</argsstring>
        <name>getProposition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="29" column="1" bodyfile="src/proposition/tree.cpp" bodystart="78" bodyend="83"/>
        <references refid="dd/df8/class_tree_1a43a26e394162774b0e0614e6567f5fe1" compoundref="d3/d09/tree_8h" startline="11">proposition</references>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a22efa22748fa8d8a598e05ceb327dfd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::isTautology</definition>
        <argsstring>()</argsstring>
        <name>isTautology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="30" column="1" bodyfile="src/proposition/tree.cpp" bodystart="90" bodyend="94"/>
        <references refid="dd/df8/class_tree_1ae9dd5a4ebbf36cd6a952c78139221cad" compoundref="d3/d09/tree_8h" startline="12">tableaux</references>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
        <references refid="d6/d22/class_semantic_tableaux_1a18a9f8fc5dce074c040564454fd710c3" compoundref="de/d3e/semantictableaux_8cpp" startline="30" endline="33">SemanticTableaux::isTautology</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1abde731a55b92d402fbbd166a577cbe91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::getValue</definition>
        <argsstring>(string valList)</argsstring>
        <name>getValue</name>
        <param>
          <type>string</type>
          <declname>valList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="31" column="1" bodyfile="src/proposition/tree.cpp" bodystart="85" bodyend="88"/>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
        <referencedby refid="dc/d49/class_truth_table_1ab113db56063be5ecf661ebc7fc439aee" compoundref="d9/d67/truthtable_8cpp" startline="6" endline="32">TruthTable::generateTable</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1ae19f22cfa4b782b5c0a048592ea3e95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::exportGraph</definition>
        <argsstring>(string title, string filenname)</argsstring>
        <name>exportGraph</name>
        <param>
          <type>string</type>
          <declname>title</declname>
        </param>
        <param>
          <type>string</type>
          <declname>filenname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="32" column="1" bodyfile="src/proposition/tree.cpp" bodystart="96" bodyend="109"/>
        <references refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" compoundref="d3/d09/tree_8h" startline="16">tree</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1ae235cdb84985c90fa56697a28b0a8d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tree::exportProof</definition>
        <argsstring>(string title, string filenname)</argsstring>
        <name>exportProof</name>
        <param>
          <type>string</type>
          <declname>title</declname>
        </param>
        <param>
          <type>string</type>
          <declname>filenname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="33" column="1" bodyfile="src/proposition/tree.cpp" bodystart="111" bodyend="114"/>
        <references refid="dd/df8/class_tree_1ae9dd5a4ebbf36cd6a952c78139221cad" compoundref="d3/d09/tree_8h" startline="12">tableaux</references>
        <references refid="d6/d22/class_semantic_tableaux_1a78039805239590cd2c8bc411158f2b2d" compoundref="de/d3e/semantictableaux_8cpp" startline="15" endline="28">SemanticTableaux::ExportProof</references>
      </memberdef>
      <memberdef kind="function" id="dd/df8/class_tree_1a9d7b51cc207222de02ccb59192454de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>string</type>
        <definition>string Tree::getDavidPutnam</definition>
        <argsstring>()</argsstring>
        <name>getDavidPutnam</name>
        <reimplementedby refid="dc/d0e/class_c_n_f_1a029535415f1d5cf92c8023693ce7b40e">getDavidPutnam</reimplementedby>
        <briefdescription>
<para>get David Putnam </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string, showing David Putnam result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/proposition/tree.h" line="38" column="1" bodyfile="src/proposition/tree.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="146">
        <label>SimpleTable</label>
        <link refid="d0/d52/class_simple_table"/>
        <childnode refid="145" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>TruthTable</label>
        <link refid="dc/d49/class_truth_table"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="144">
        <label>Predicate</label>
        <link refid="d5/d30/class_predicate"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>CNF</label>
        <link refid="dc/d0e/class_c_n_f"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>Tree</label>
        <link refid="dd/df8/class_tree"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="147">
        <label>Tree</label>
        <link refid="dd/df8/class_tree"/>
        <childnode refid="148" relation="usage">
          <edgelabel>tableaux</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>SemanticTableaux</label>
        <link refid="d6/d22/class_semantic_tableaux"/>
      </node>
    </collaborationgraph>
    <location file="src/proposition/tree.h" line="9" column="1" bodyfile="src/proposition/tree.h" bodystart="8" bodyend="39"/>
    <listofallmembers>
      <member refid="dd/df8/class_tree_1ae19f22cfa4b782b5c0a048592ea3e95f" prot="public" virt="non-virtual"><scope>Tree</scope><name>exportGraph</name></member>
      <member refid="dd/df8/class_tree_1ae235cdb84985c90fa56697a28b0a8d9e" prot="public" virt="non-virtual"><scope>Tree</scope><name>exportProof</name></member>
      <member refid="dd/df8/class_tree_1a9d7b51cc207222de02ccb59192454de5" prot="public" virt="virtual"><scope>Tree</scope><name>getDavidPutnam</name></member>
      <member refid="dd/df8/class_tree_1a525967d14a17de0ad9c9072b025af1c3" prot="public" virt="virtual"><scope>Tree</scope><name>getListVariable</name></member>
      <member refid="dd/df8/class_tree_1a60a9b7d65fc663d2db005b01119efa73" prot="protected" virt="virtual"><scope>Tree</scope><name>getNode</name></member>
      <member refid="dd/df8/class_tree_1a7d2c78122409858b2516b52514bd7fe8" prot="public" virt="non-virtual"><scope>Tree</scope><name>getProposition</name></member>
      <member refid="dd/df8/class_tree_1a016c2300dfa5444a52e6e6db7be850d2" prot="protected" virt="virtual"><scope>Tree</scope><name>getStatement</name></member>
      <member refid="dd/df8/class_tree_1ad9bd7cd558397f596703e92fc47aa91f" prot="public" virt="non-virtual"><scope>Tree</scope><name>getTree</name></member>
      <member refid="dd/df8/class_tree_1abde731a55b92d402fbbd166a577cbe91" prot="public" virt="non-virtual"><scope>Tree</scope><name>getValue</name></member>
      <member refid="dd/df8/class_tree_1a22efa22748fa8d8a598e05ceb327dfd4" prot="public" virt="non-virtual"><scope>Tree</scope><name>isTautology</name></member>
      <member refid="dd/df8/class_tree_1ad05978c3b3aaa0eefed672a5129c00a1" prot="private" virt="virtual"><scope>Tree</scope><name>parse</name></member>
      <member refid="dd/df8/class_tree_1a2a8e8236ffc2a6ba0ba580f4f0b01128" prot="protected" virt="non-virtual"><scope>Tree</scope><name>prop_in</name></member>
      <member refid="dd/df8/class_tree_1a43a26e394162774b0e0614e6567f5fe1" prot="private" virt="non-virtual"><scope>Tree</scope><name>proposition</name></member>
      <member refid="dd/df8/class_tree_1ae9dd5a4ebbf36cd6a952c78139221cad" prot="private" virt="non-virtual"><scope>Tree</scope><name>tableaux</name></member>
      <member refid="dd/df8/class_tree_1a114a18872bc2535a73ceb0719cde7945" prot="public" virt="non-virtual"><scope>Tree</scope><name>Tree</name></member>
      <member refid="dd/df8/class_tree_1a6515b810a36ab46fa79b9dc9d426a8ff" prot="public" virt="non-virtual"><scope>Tree</scope><name>Tree</name></member>
      <member refid="dd/df8/class_tree_1a9c0875a8767528453814b8e3daf8f9af" prot="protected" virt="non-virtual"><scope>Tree</scope><name>tree</name></member>
      <member refid="dd/df8/class_tree_1a38bca58f3aef44e939f69f092037af50" prot="protected" virt="non-virtual"><scope>Tree</scope><name>varList</name></member>
      <member refid="dd/df8/class_tree_1abdc38545cf3f588725b5d8b8075b3866" prot="public" virt="virtual"><scope>Tree</scope><name>~Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
